//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 7 images.
  struct image {
    /// Image `005-sunny`.
    static let sunny = Rswift.ImageResource(bundle: R.hostingBundle, name: "005-sunny")
    /// Image `006-sun`.
    static let sun = Rswift.ImageResource(bundle: R.hostingBundle, name: "006-sun")
    /// Image `007-clouds`.
    static let clouds = Rswift.ImageResource(bundle: R.hostingBundle, name: "007-clouds")
    /// Image `car_placeholder`.
    static let car_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "car_placeholder")
    /// Image `plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
    /// Image `test_car`.
    static let test_car = Rswift.ImageResource(bundle: R.hostingBundle, name: "test_car")
    /// Image `weather_back`.
    static let weather_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "weather_back")
    
    /// `UIImage(named: "005-sunny", bundle: ..., traitCollection: ...)`
    static func sunny(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sunny, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "006-sun", bundle: ..., traitCollection: ...)`
    static func sun(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sun, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "007-clouds", bundle: ..., traitCollection: ...)`
    static func clouds(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clouds, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "car_placeholder", bundle: ..., traitCollection: ...)`
    static func car_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.car_placeholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "test_car", bundle: ..., traitCollection: ...)`
    static func test_car(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.test_car, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "weather_back", bundle: ..., traitCollection: ...)`
    static func weather_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weather_back, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 8 nibs.
  struct nib {
    /// Nib `AddNewCarCell`.
    static let addNewCarCell = _R.nib._AddNewCarCell()
    /// Nib `AlreadyAddedCell`.
    static let alreadyAddedCell = _R.nib._AlreadyAddedCell()
    /// Nib `CarCell`.
    static let carCell = _R.nib._CarCell()
    /// Nib `CoupleCell`.
    static let coupleCell = _R.nib._CoupleCell()
    /// Nib `HorizontalCell`.
    static let horizontalCell = _R.nib._HorizontalCell()
    /// Nib `PhotoCollectionView`.
    static let photoCollectionView = _R.nib._PhotoCollectionView()
    /// Nib `VerticalCell`.
    static let verticalCell = _R.nib._VerticalCell()
    /// Nib `WeatherView`.
    static let weatherView = _R.nib._WeatherView()
    
    /// `UINib(name: "AddNewCarCell", in: bundle)`
    static func addNewCarCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addNewCarCell)
    }
    
    /// `UINib(name: "AlreadyAddedCell", in: bundle)`
    static func alreadyAddedCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.alreadyAddedCell)
    }
    
    /// `UINib(name: "CarCell", in: bundle)`
    static func carCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.carCell)
    }
    
    /// `UINib(name: "CoupleCell", in: bundle)`
    static func coupleCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.coupleCell)
    }
    
    /// `UINib(name: "HorizontalCell", in: bundle)`
    static func horizontalCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.horizontalCell)
    }
    
    /// `UINib(name: "PhotoCollectionView", in: bundle)`
    static func photoCollectionView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.photoCollectionView)
    }
    
    /// `UINib(name: "VerticalCell", in: bundle)`
    static func verticalCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.verticalCell)
    }
    
    /// `UINib(name: "WeatherView", in: bundle)`
    static func weatherView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.weatherView)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AlreadyAddedCell.validate()
      try _WeatherView.validate()
      try _CarCell.validate()
      try _PhotoCollectionView.validate()
      try _AddNewCarCell.validate()
    }
    
    struct _AddNewCarCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddNewCarCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AddNewCarCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddNewCarCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "plus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus' is used in nib 'AddNewCarCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _AlreadyAddedCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AlreadyAddedCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AlreadyAddedCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AlreadyAddedCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "car_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'car_placeholder' is used in nib 'AlreadyAddedCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _CarCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CarCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CarCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CarCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "car_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'car_placeholder' is used in nib 'CarCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _CoupleCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CoupleCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CoupleCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CoupleCell
      }
      
      fileprivate init() {}
    }
    
    struct _HorizontalCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HorizontalCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HorizontalCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HorizontalCell
      }
      
      fileprivate init() {}
    }
    
    struct _PhotoCollectionView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PhotoCollectionView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PhotoCollectionView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PhotoCollectionView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "car_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'car_placeholder' is used in nib 'PhotoCollectionView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _VerticalCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "VerticalCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> VerticalCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VerticalCell
      }
      
      fileprivate init() {}
    }
    
    struct _WeatherView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WeatherView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> WeatherView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WeatherView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "005-sunny", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '005-sunny' is used in nib 'WeatherView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "weather_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'weather_back' is used in nib 'WeatherView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CarListVC
      
      let addNewCarScreenVC = StoryboardViewControllerResource<AddNewCarScreenVC>(identifier: "AddNewCarScreenVC")
      let bundle = R.hostingBundle
      let carInfoVC = StoryboardViewControllerResource<CarInfoVC>(identifier: "CarInfoVC")
      let carListVC = StoryboardViewControllerResource<CarListVC>(identifier: "CarListVC")
      let name = "Main"
      
      func addNewCarScreenVC(_: Void = ()) -> AddNewCarScreenVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addNewCarScreenVC)
      }
      
      func carInfoVC(_: Void = ()) -> CarInfoVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: carInfoVC)
      }
      
      func carListVC(_: Void = ()) -> CarListVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: carListVC)
      }
      
      static func validate() throws {
        if _R.storyboard.main().carListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'carListVC' could not be loaded from storyboard 'Main' as 'CarListVC'.") }
        if _R.storyboard.main().addNewCarScreenVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addNewCarScreenVC' could not be loaded from storyboard 'Main' as 'AddNewCarScreenVC'.") }
        if _R.storyboard.main().carInfoVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'carInfoVC' could not be loaded from storyboard 'Main' as 'CarInfoVC'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
